##########################################
######### REQUIRES INT_UTIL.WACC #########
##########################################


#heapsort a given array
int[] sort(int[] array) is
  int length = len(array);
  heapify(array, length);
  int last = length - 1;
  while last > 0 do
    swap(array, 0, last);
    end = end - 1;
    heapify(array, 0, last); #re-heapify the messed up heap
  end
end

#find the address of a parent of a given child in a heap
int iParent(int i) is
  return (i-1)/2
end

#turn given array into a heap
void heapify(int[] array, int length) is
  int last = 1;
  while end < length do
    siftUp(array, 0, last);
    last = last + 1;
  end
end

#in the semiheap, sift array[last] up to start
void siftUp(int[] array, int start, int last) is
  int child = last;
  int parent;
  while child > start do
    parent = iParent(child);
    if array[parent] < array[child] then
      swap(array, parent, child);
      child = parent
    else
      return
    end
  end
end

#swaps elements at first and second in the given array
void swap(int[] array, int first, int second) is
  int temp = array[first];
  array[first] = array[second];
  array[second] = temp
end

#returns true if a given element is in given array, false otherwise
bool contains(int[] array, int search) is
  int length = len(array);
  int count = 0;
  while count < length do
    if array[count] == search then
      return true
    else
      count = count + 1
    end
  end
  return false
end

#return the first index of given element in given array, -1 if not found
int find(int[] array, int search) do
  int length = len(array);
  int count = 0;
  while count < length do
    if array[count] == search then
      return true;
    else
      count = count + 1;
    end
  end
  return -1;
end

#return 1 if array1 > array2, -1 if array1 < array2, 0 if array1 == array2
#component-wise
int arraycmp(int[] array1, int[] array2) is
  int length = min(len(array1), len(array2));
  int count = 0;
  int elem1 = 0; int elem2 = 0;
  while count < length do
    elem1 = array1[count];
    elem2 = array2[count];
    if elem1 > elem2 then
      return 1;
    else
      if elem1 < elem2 then
        return -1;
      else
        count = count + 1;
      end
    end
  end
  return cmp(len(array1), len(array2));
end
